// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package moq_serivce

import (
	"context"
	"github.com/alexanderdotcom/mockgen_example/pkg/service"
	"sync"
)

// Ensure, that BankMock does implement service.Bank.
// If this is not the case, regenerate this file with moq.
var _ service.Bank = &BankMock{}

// BankMock is a mock implementation of service.Bank.
//
//	func TestSomethingThatUsesBank(t *testing.T) {
//
//		// make and configure a mocked service.Bank
//		mockedBank := &BankMock{
//			CreateAccountFunc: func(ctx context.Context, account string) error {
//				panic("mock out the CreateAccount method")
//			},
//			DepositMoneyFunc: func(ctx context.Context, account string, amount int) error {
//				panic("mock out the DepositMoney method")
//			},
//			WithdrawMoneyFunc: func(ctx context.Context, account string, amount int) error {
//				panic("mock out the WithdrawMoney method")
//			},
//		}
//
//		// use mockedBank in code that requires service.Bank
//		// and then make assertions.
//
//	}
type BankMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, account string) error

	// DepositMoneyFunc mocks the DepositMoney method.
	DepositMoneyFunc func(ctx context.Context, account string, amount int) error

	// WithdrawMoneyFunc mocks the WithdrawMoney method.
	WithdrawMoneyFunc func(ctx context.Context, account string, amount int) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account string
		}
		// DepositMoney holds details about calls to the DepositMoney method.
		DepositMoney []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account string
			// Amount is the amount argument value.
			Amount int
		}
		// WithdrawMoney holds details about calls to the WithdrawMoney method.
		WithdrawMoney []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account string
			// Amount is the amount argument value.
			Amount int
		}
	}
	lockCreateAccount sync.RWMutex
	lockDepositMoney  sync.RWMutex
	lockWithdrawMoney sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *BankMock) CreateAccount(ctx context.Context, account string) error {
	if mock.CreateAccountFunc == nil {
		panic("BankMock.CreateAccountFunc: method is nil but Bank.CreateAccount was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account string
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(ctx, account)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//
//	len(mockedBank.CreateAccountCalls())
func (mock *BankMock) CreateAccountCalls() []struct {
	Ctx     context.Context
	Account string
} {
	var calls []struct {
		Ctx     context.Context
		Account string
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// DepositMoney calls DepositMoneyFunc.
func (mock *BankMock) DepositMoney(ctx context.Context, account string, amount int) error {
	if mock.DepositMoneyFunc == nil {
		panic("BankMock.DepositMoneyFunc: method is nil but Bank.DepositMoney was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account string
		Amount  int
	}{
		Ctx:     ctx,
		Account: account,
		Amount:  amount,
	}
	mock.lockDepositMoney.Lock()
	mock.calls.DepositMoney = append(mock.calls.DepositMoney, callInfo)
	mock.lockDepositMoney.Unlock()
	return mock.DepositMoneyFunc(ctx, account, amount)
}

// DepositMoneyCalls gets all the calls that were made to DepositMoney.
// Check the length with:
//
//	len(mockedBank.DepositMoneyCalls())
func (mock *BankMock) DepositMoneyCalls() []struct {
	Ctx     context.Context
	Account string
	Amount  int
} {
	var calls []struct {
		Ctx     context.Context
		Account string
		Amount  int
	}
	mock.lockDepositMoney.RLock()
	calls = mock.calls.DepositMoney
	mock.lockDepositMoney.RUnlock()
	return calls
}

// WithdrawMoney calls WithdrawMoneyFunc.
func (mock *BankMock) WithdrawMoney(ctx context.Context, account string, amount int) error {
	if mock.WithdrawMoneyFunc == nil {
		panic("BankMock.WithdrawMoneyFunc: method is nil but Bank.WithdrawMoney was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account string
		Amount  int
	}{
		Ctx:     ctx,
		Account: account,
		Amount:  amount,
	}
	mock.lockWithdrawMoney.Lock()
	mock.calls.WithdrawMoney = append(mock.calls.WithdrawMoney, callInfo)
	mock.lockWithdrawMoney.Unlock()
	return mock.WithdrawMoneyFunc(ctx, account, amount)
}

// WithdrawMoneyCalls gets all the calls that were made to WithdrawMoney.
// Check the length with:
//
//	len(mockedBank.WithdrawMoneyCalls())
func (mock *BankMock) WithdrawMoneyCalls() []struct {
	Ctx     context.Context
	Account string
	Amount  int
} {
	var calls []struct {
		Ctx     context.Context
		Account string
		Amount  int
	}
	mock.lockWithdrawMoney.RLock()
	calls = mock.calls.WithdrawMoney
	mock.lockWithdrawMoney.RUnlock()
	return calls
}
